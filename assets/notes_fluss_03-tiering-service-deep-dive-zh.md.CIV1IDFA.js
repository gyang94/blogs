import{_ as i,a as s,b as t,c as r,d as n,e as o}from"./chunks/tiering-committer.DtrepwyP.js";import{_ as a,c as l,o as g,ae as p}from"./chunks/framework.Bk39dawk.js";const b=JSON.parse('{"title":"Tiering Service Deep Dive","description":"","frontmatter":{"title":"Tiering Service Deep Dive","tags":"fluss","outline":"deep"},"headers":[],"relativePath":"notes/fluss/03-tiering-service-deep-dive-zh.md","filePath":"notes/fluss/03-tiering-service-deep-dive-zh.md","lastUpdated":1752683872000}'),c={name:"notes/fluss/03-tiering-service-deep-dive-zh.md"};function d(h,e,k,u,m,E){return g(),l("div",null,e[0]||(e[0]=[p('<h1 id="tiering-service-deep-dive" tabindex="-1">Tiering Service Deep Dive <a class="header-anchor" href="#tiering-service-deep-dive" aria-label="Permalink to &quot;Tiering Service Deep Dive&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p><img src="'+i+'" alt=""></p><p>Fluss 湖仓架构的核心是<strong>分层服务 (Tiering Service)</strong> —— 这是一个智能的、策略驱动的数据管道，它无缝地连接着您的实时 Fluss 集群和高性价比的湖仓存储。该服务持续从 Fluss 集群摄取新事件，并自动将较旧或访问频率较低的数据迁移到更冷的存储层中，且整个过程不会中断正在进行的查询。通过根据可配置的规则平衡热、温、冷存储，分层服务确保了最新数据立即可查，同时又能经济高效地归档历史记录。在本篇深度剖析中，我们将探讨 Fluss 的分层服务如何编排数据、保障数据一致性，并在兼顾性能与成本的前提下完成数据分析工作。</p><h2 id="flink-分层服务-flink-tiering-service" tabindex="-1">Flink 分层服务 (Flink Tiering Service) <a class="header-anchor" href="#flink-分层服务-flink-tiering-service" aria-label="Permalink to &quot;Flink 分层服务 (Flink Tiering Service)&quot;">​</a></h2><p>Fluss 分层服务是作为一个 Flink job 实现的，它持续地将数据从 Fluss 集群流式传输到您的数据湖中。其执行图非常简单，由三个算子（operators）组成：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> Source: TieringSource -&gt; TieringCommitter -&gt; Sink: Writer</span></span></code></pre></div><ul><li><strong>TieringSource</strong>: 从 Fluss 表读取记录并将其写入数据湖。</li><li><strong>TieringCommitter</strong>: 通过推进数据湖仓和 Fluss 集群中的偏移量（offsets）来提交每个同步批次（sync batch）。</li><li><strong>No-Op Sink</strong>: 一个虚拟接收器（dummy sink），不执行任何实际操作。</li></ul><p>在接下来的章节中，我们将深入探讨 TieringSource 和 TieringCommitter，看看它们究竟是如何编排实时存储与历史存储之间的无缝数据传输的。</p><h2 id="tieringsource" tabindex="-1">TieringSource <a class="header-anchor" href="#tieringsource" aria-label="Permalink to &quot;TieringSource&quot;">​</a></h2><p><img src="'+s+'" alt=""></p><p><strong>TieringSource 算子</strong> 从 Fluss 分层表（tiering table）读取记录并将其写入您的数据湖。它构建在 Flink 的 Source V2 API (<a href="https://cwiki.apache.org/confluence/display/FLINK/FLIP-27%3A+Refactor+Source+Interface" target="_blank" rel="noreferrer">FLIP-27</a>) 之上，分解为两个核心组件：<strong>TieringSourceEnumerator</strong> 和 <strong>TieringSourceReader</strong>。其高层工作流程如下：</p><ol><li><strong>Enumerator</strong> 向 CoordinatorService 查询当前分层表的元数据。</li><li>一旦收到表信息，Enumerator 生成“分片”（splits，即数据分区）并将它们分配给 Reader。</li><li><strong>Reader</strong> 获取每个分片的实际数据。</li><li>随后，Reader 将这些记录写入数据湖。</li></ol><p>在接下来的章节中，我们将深入探讨 TieringSourceEnumerator 和 TieringSourceReader 的内部工作机制，了解它们如何实现从 Fluss 到湖仓的可靠、可扩展的数据摄取。</p><h3 id="tieringsourceenumerator" tabindex="-1">TieringSourceEnumerator <a class="header-anchor" href="#tieringsourceenumerator" aria-label="Permalink to &quot;TieringSourceEnumerator&quot;">​</a></h3><p><img src="'+t+'" alt=""></p><p><strong>TieringSourceEnumerator</strong> 通过五个关键步骤编排分片的创建和分配：</p><ol><li><strong>心跳请求 (Heartbeat Request)</strong>：使用 RPC 客户端向 Fluss 服务器发送 <strong><code>lakeTieringHeartbeatRequest</code></strong>。</li><li><strong>心跳响应 (Heartbeat Response)</strong>：接收包含分层表元数据以及已完成、失败和进行中表的同步状态的 <strong><code>lakeTieringHeartbeatResponse</code></strong>。</li><li><strong>湖分层信息 (Lake Tiering Info)</strong>：将返回的 <strong><code>lakeTieringInfo</code></strong> 转发给 <strong><code>TieringSplitGenerator</code></strong>。</li><li><strong>分片生成 (Split Generation)</strong>：<strong><code>TieringSplitGenerator</code></strong> 生成一组 <strong><code>TieringSplits</code></strong>——每个分片代表一个待处理的数据分区。</li><li><strong>分片分配 (Split Assignment)</strong>：将这些 <strong><code>TieringSplits</code></strong> 分配给 <strong><code>TieringSourceReader</code></strong> 实例，以便后续摄取到数据湖中。</li></ol><h4 id="rpcclient" tabindex="-1">RpcClient <a class="header-anchor" href="#rpcclient" aria-label="Permalink to &quot;RpcClient&quot;">​</a></h4><ul><li><strong>发送心跳 (Sending Heartbeats)</strong>：它构造并发送 <strong><code>LakeTieringHeartbeatRequest</code></strong> 消息。该消息携带三个表列表——<strong><code>tiering_tables</code></strong>（进行中）、<strong><code>finished_tables</code></strong>（已完成）和 <strong><code>failed_tables</code></strong>（失败）——以及一个可选的 <strong><code>request_table</code></strong> 标志（用于请求新的分层工作）。</li><li><strong>接收响应 (Receiving Responses)</strong>：它等待一个包含以下内容的 <strong><code>LakeTieringHeartbeatResponse</code></strong> 响应： <ul><li><strong><code>coordinator_epoch</code></strong>：Coordinator 的当前纪元（epoch）。</li><li><strong><code>tiering_table</code></strong> (可选)：一个 <strong><code>PbLakeTieringTableInfo</code></strong> 消息（包含 <strong><code>table_id</code></strong>、<strong><code>table_path</code></strong> 和 <strong><code>tiering_epoch</code></strong>），描述下一个要进行分层的表。</li><li><strong><code>tiering_table_resp</code></strong>、<strong><code>finished_table_resp</code></strong> 和 <strong><code>failed_table_resp</code></strong>：反映每个表状态的心跳响应列表。</li></ul></li><li><strong>转发元数据 (Forwarding Metadata)</strong>：它解析返回的 <strong><code>PbLakeTieringTableInfo</code></strong> 和同步状态响应，然后将组装好的 <strong><code>lakeTieringInfo</code></strong> 转发给 <strong><code>TieringSplitGenerator</code></strong> 用于创建分片。</li></ul><h4 id="tieringsplitgenerator" tabindex="-1">TieringSplitGenerator <a class="header-anchor" href="#tieringsplitgenerator" aria-label="Permalink to &quot;TieringSplitGenerator&quot;">​</a></h4><p><img src="'+r+'" alt=""></p><p><strong>TieringSplitGenerator</strong> 计算您的湖仓与 Fluss 集群之间精确的数据差异（delta），然后为每个需要同步的数据段生成 <strong><code>TieringSplit</code></strong> 任务。它使用 <strong><code>FlussAdminClient</code></strong> 获取三个核心元数据：</p><ol><li><strong>湖快照 (Lake Snapshot)</strong><ul><li>调用湖元数据 API 获取 <strong><code>LakeSnapshot</code></strong> 对象，该对象包含： <ul><li><strong><code>snapshotId</code></strong>（数据湖中最新已提交的快照 ID）</li><li><strong><code>tableBucketsOffset</code></strong>（一个映射，将每个 <strong><code>TableBucket</code></strong> 关联到其在湖仓中的日志偏移量）</li></ul></li></ul></li><li><strong>当前桶偏移量 (Current Bucket Offsets)</strong><ul><li>向 Fluss 服务器查询每个桶（bucket）当前的日志结束偏移量（log end offset），捕获输入流的高水位标记（high-water mark）。</li></ul></li><li><strong>KV 快照 (KV Snapshots) (针对主键表)</strong><ul><li>获取一个 <strong><code>KvSnapshots</code></strong> 记录，包含： <ul><li><strong><code>tableId</code></strong> 和可选的 <strong><code>partitionId</code></strong></li><li><strong><code>snapshotIds</code></strong>（每个桶的最新快照 ID）</li><li><strong><code>logOffsets</code></strong>（在该快照之后恢复读取的日志位置）</li></ul></li></ul></li></ol><p>利用 <strong><code>LakeSnapshot</code></strong>、实时的桶偏移量以及（如果适用）<strong><code>KvSnapshots</code></strong>，生成器计算出哪些日志段存在于 Fluss 中但尚未提交到湖仓。然后，它为每个段生成一个 <strong><code>TieringSplit</code></strong>——每个分片精确定义了要摄取的桶和偏移量范围——从而实现了实时存储与历史存储之间的增量式、高效同步。</p><h4 id="tieringsplit" tabindex="-1">TieringSplit <a class="header-anchor" href="#tieringsplit" aria-label="Permalink to &quot;TieringSplit&quot;">​</a></h4><p><strong>TieringSplit</strong> 抽象精确定义了需要同步的表桶（table bucket）中的哪一部分数据。它捕获三个公共字段：</p><ul><li><strong>tablePath</strong>: 目标表的完整路径。</li><li><strong>tableBucket</strong>: 该表中的特定桶（分片/shard）。</li><li><strong>partitionName</strong> (可选): 分区键（如果表是分区的）。</li></ul><p>有两种具体分片类型：</p><ol><li><strong>TieringLogSplit</strong> (用于仅追加的“日志”表) <ul><li><strong>startingOffset</strong>: 湖仓中最后提交的日志偏移量。</li><li><strong>stoppingOffset</strong>: 实时 Fluss 桶中的当前结束偏移量。</li><li>此分片定义了一个需要摄取的新日志记录的连续范围。</li></ul></li><li><strong>TieringSnapshotSplit</strong> (用于主键表) <ul><li><strong>snapshotId</strong>: Fluss 中最新快照的标识符。</li><li><strong>logOffsetOfSnapshot</strong>: 拍摄该快照时的日志偏移量。</li><li>此分片让 TieringSourceReader 能够重放（replay）自该快照以来的所有 CDC（变更数据捕获）事件，确保状态是最新的。</li></ul></li></ol><p>通过将每个表分解成这些定义明确的分片，分层服务能够以增量、可靠且并行的方式，仅同步数据湖中缺失的那部分数据。</p><h3 id="tieringsourcereader" tabindex="-1">TieringSourceReader <a class="header-anchor" href="#tieringsourcereader" aria-label="Permalink to &quot;TieringSourceReader&quot;">​</a></h3><p><img src="'+n+`" alt=""></p><p><strong>TieringSourceReader</strong> 从 Enumerator 拉取分配的分片（splits），使用 <strong><code>TieringSplitReader</code></strong> 从 Fluss 服务器获取相应的记录，然后将它们写入数据湖。其工作流程分解如下：</p><ol><li><p><strong>分片选择 (Split Selection)</strong></p><p>该 Reader 从其队列中选取一个分配的 <strong><code>TieringSplit</code></strong>。</p></li><li><p><strong>Reader 分派 (Reader Dispatch)</strong></p><p>根据分片类型，它实例化对应的 Reader：</p><ul><li><strong>LogScanner</strong>：用于 <strong><code>TieringLogSplit</code></strong>（仅追加表）</li><li><strong>BoundedSplitReader</strong>：用于 <strong><code>TieringSnapshotSplit</code></strong>（主键表）</li></ul></li><li><p><strong>数据获取 (Data Fetch)</strong></p><p>选定的 Reader 从 Fluss 服务器获取由分片的偏移量或快照边界定义的记录。</p></li><li><p><strong>湖写入 (Lake Writing)</strong></p><p>检索到的记录被移交给 Lake Writer，由后者将它们持久化到数据湖中。</p></li></ol><p>通过清晰分离分片分配、Reader 选择、数据获取和湖写入，TieringSourceReader 确保了流数据和快照数据可扩展、并行地摄取到您的湖仓中。</p><h4 id="lakewriter-laketieringfactory" tabindex="-1">LakeWriter &amp; LakeTieringFactory <a class="header-anchor" href="#lakewriter-laketieringfactory" aria-label="Permalink to &quot;LakeWriter &amp; LakeTieringFactory&quot;">​</a></h4><p><strong>LakeWriter</strong> 负责将 Fluss 记录持久化到您的数据湖中，它是通过一个可插拔的 <strong>LakeTieringFactory</strong> 接口实例化的。该接口定义了 Fluss 如何与不同的湖存储格式（例如 Paimon、Iceberg）交互：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LakeTieringFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	LakeWriter&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WriteResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createLakeWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WriterInitContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">writerInitContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	****</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleVersionedSerializer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WriteResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriteResultSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	LakeCommitter&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WriteResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CommitableT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createLakeCommitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            CommitterInitContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">committerInitContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	SimpleVersionedSerializer&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CommitableT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCommitableSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>createLakeWriter(WriterInitContext)</strong>：构建一个 <strong><code>LakeWriter</code></strong>，用于将 Fluss 行转换为目标表格式。</li><li><strong>getWriteResultSerializer()</strong>：提供用于序列化 Writer 输出的序列化器。</li><li><strong>createLakeCommitter(CommitterInitContext)</strong>：构造一个 <strong><code>LakeCommitter</code></strong>，用于最终确定并原子性地提交数据文件。</li><li><strong>getCommitableSerializer()</strong>：提供用于可提交令牌（committable tokens）的序列化器。</li></ul><p>默认情况下，Fluss 包含一个基于 Paimon 的分层工厂；Iceberg 的支持即将推出。一旦 <strong><code>TieringSourceReader</code></strong> 通过 <strong><code>LakeWriter</code></strong> 写入一批记录，它就会将产生的写入元数据向下游发出给 <strong>TieringCommitOperator</strong>，后者随后在湖仓和 Fluss 集群中提交这些更改。</p><h4 id="stateless" tabindex="-1">Stateless <a class="header-anchor" href="#stateless" aria-label="Permalink to &quot;Stateless&quot;">​</a></h4><p><strong><code>TieringSourceReader</code></strong> 被设计为完全无状态——它本身不进行状态检查点（checkpoint）或存储任何 <strong><code>TieringSplit</code></strong> 信息。相反，每次检查点（checkpoint）只返回一个空列表，将所有分片跟踪工作留给 <strong><code>TieringSourceEnumerator</code></strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TieringSplit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> snapshotState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> checkpointId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无状态：Reader 状态中不持有任何分片return Collections.emptyList();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过将分片分配完全委托给 Enumerator，Reader 保持轻量级且易于扩展，始终从 Coordinator 处获取新的工作单元。</p><h2 id="tieringcommitter" tabindex="-1">TieringCommitter <a class="header-anchor" href="#tieringcommitter" aria-label="Permalink to &quot;TieringCommitter&quot;">​</a></h2><p><strong>TieringCommitter</strong> 算子收集来自 TieringSource 的分层表同步写入结果，然后将结果提交到湖仓和 Fluss 服务器以更新状态。</p><p><img src="`+o+'" alt=""></p><p><strong>TieringCommitter</strong> 算子通过获取 TieringSourceReader 输出的 <strong><code>WriteResult</code></strong> 并分两个阶段提交它们（先提交到数据湖，然后提交回 Fluss）来结束每个同步周期，最后向 Flink coordinator 发出状态事件。它利用两个组件：</p><ul><li><strong>LakeCommitter</strong>：由可插拔的 <strong><code>LakeTieringFactory</code></strong> 提供，该组件原子性地将写入的文件提交到湖仓，并返回新的快照 ID。</li><li><strong>FlussTableLakeSnapshotCommitter</strong>：使用该快照 ID，它更新 Fluss 集群的分层表状态，使 Fluss 服务器和湖仓保持同步。</li></ul><p>端到端流程是：</p><ol><li><strong>收集写入结果</strong>：从 TieringSourceReader 收集当前检查点的写入结果。</li><li><strong>湖仓提交</strong>：通过 <strong><code>LakeCommitter</code></strong> 完成文件并推进湖仓快照。</li><li><strong>Fluss 更新</strong>：使用 <strong><code>FlussTableLakeSnapshotCommitter</code></strong>，向 Fluss CoordinatorService 确认成功或失败。</li><li><strong>事件发出</strong>：向 Flink <strong><code>OperatorCoordinator</code></strong> 发出 <strong><code>FinishedTieringEvent</code></strong>（成功或完成时）或 <strong><code>FailedTieringEvent</code></strong>（出错时）。</li></ol><p>TieringCommitter 算子确保了您的实时 Fluss 集群与分析型湖仓之间具有精确一次（exactly-once）语义的一致性同步。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>在本次深度剖析中，我们拆解了 Fluss 分层服务的每一层——从 TieringSource（Enumerator、RpcClient 和 SplitGenerator）开始，探讨了分片类型和无状态的 TieringSourceReader，并探索了可插拔的 LakeWriter/LakeCommitter 集成。然后，我们了解了 TieringCommitter（及其 LakeCommitter 和 FlussTableLakeSnapshotCommitter）如何确保在您的数据湖和 Fluss 集群之间进行原子性的、精确一次的提交。这些组件共同构建了一个强大的管道，能够可靠地同步实时流和历史快照，为您在实时负载和分析存储之间提供无缝、可扩展的一致性服务。</p>',55)]))}const F=a(c,[["render",d]]);export{b as __pageData,F as default};
