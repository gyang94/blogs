import{_ as e,c as l,o as i,ae as r}from"./chunks/framework.Bk39dawk.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"material.md","filePath":"material.md","lastUpdated":1742313570000}'),t={name:"material.md"};function n(o,a,c,h,u,s){return i(),l("div",null,a[0]||(a[0]=[r('<blockquote><p>这篇文章整理了 Iceberg，Paimon，Fluss，以及Flink 2.0的一些特性和资料。</p></blockquote><h2 id="iceberg" tabindex="-1">Iceberg <a class="header-anchor" href="#iceberg" aria-label="Permalink to &quot;Iceberg&quot;">​</a></h2><p>Iceberg是一种用于大型分析表的高性能格式。Iceberg为大数据带来了SQL表的可靠性和简单性，同时使Spark、Trino、Flink、Presto、Hive和Impala等引擎能够同时安全地使用相同的表。</p><p>Iceberg设计初衷是为了解决Hive离线数仓计算慢等一系列问题，经过迭代发展成为构建数据湖服务的表格式。</p><p>Iceberg存储层支持元数据、数据文件保存到分布式文件系统（HDFS、S3）上的表级别的的组织形式，同时支持一系列特性对存储的表格式进行操作，比如合并、快照、分支、标签。</p><p>因为Iceberg仅仅是一种数据组织的形式（表格式）。所以对上层支持市面上各种引擎基于表格式进行操作。</p><h3 id="hive的历史问题" tabindex="-1">Hive的历史问题 <a class="header-anchor" href="#hive的历史问题" aria-label="Permalink to &quot;Hive的历史问题&quot;">​</a></h3><p>Hudi、Iceberg、Paimon存储层表格式诞生之初，百分之99的数仓都是以为Hive为主的数仓架构设计。</p><p>基于Hive数据仓库的痛点</p><ul><li>痛点1 <ul><li>1.1 不支持行级删除，修改成本高</li><li>1.2 不支持upsert修改场景</li><li>1.3 不支持ACID事务</li></ul></li><li>痛点2 <ul><li>2.1 不支持增量读取，不支持批流统一</li><li>2.2 分析时效达不到分钟级别，数据达不到准实时</li></ul></li><li>痛点3 <ul><li>3.1 Schema变更能力差</li><li>3.2 Partition策略变更能力差</li></ul></li></ul><p>链路风险：</p><ul><li>几乎都是T+1的延迟，失败重试（有时复杂任务重试成本很大）。</li><li>Lambda架构运维成本高、容易出现数据不一致。</li><li>Hive Metastore访问压力大。</li></ul><h3 id="iceberg相比较hive的优势" tabindex="-1">Iceberg相比较Hive的优势 <a class="header-anchor" href="#iceberg相比较hive的优势" aria-label="Permalink to &quot;Iceberg相比较Hive的优势&quot;">​</a></h3><p>特性支持：</p><ul><li>基于快照实现ACID能力。</li><li>Schema Evolution&amp;Partition Evolution。</li><li>支持HDFS、S3、OSS、minio。</li></ul><p>链路优势：</p><ul><li>支持Flink、Spark近实时的写入，T+1延迟降低为分钟级别。</li><li>实现流批一体、湖仓一体架构降低运维成本</li><li>支持Hive Catalog、Hadoop Catalog、Rest Catalog等多种元数据存储方式。</li></ul><h3 id="生产实践" tabindex="-1">生产实践 <a class="header-anchor" href="#生产实践" aria-label="Permalink to &quot;生产实践&quot;">​</a></h3><ul><li><a href="https://flink-learning.org.cn/article/detail/574b5f4618255552ecacb24c7c1ce8e8" target="_blank" rel="noreferrer">腾讯 Flink + Iceberg，百亿级实时数据入湖实战</a></li><li><a href="https://www.dtstack.com/bbs/article/920" target="_blank" rel="noreferrer">数据湖Iceberg技术在小米的落地与应用场景</a></li><li><a href="https://flink-learning.org.cn/article/detail/8e580d78309ef019315f93f5de0802de" target="_blank" rel="noreferrer">汽车之家：基于 Flink + Iceberg 的湖仓一体架构实践</a></li></ul><h2 id="paimon" tabindex="-1">Paimon <a class="header-anchor" href="#paimon" aria-label="Permalink to &quot;Paimon&quot;">​</a></h2><p>Paimon也是一种表格式，但更倾向于实时流处理的数据湖。它在实时场景下更优秀，同时借鉴了很多Iceberg，Hudi的优秀设计(Branch, Tag, Compact)。</p><p>有关paimon的历史，用Iceberg做实时湖仓会遇到哪些问题，paimon在流场景下改进如何改进设计，解决了哪些问题等等介绍，都可以在下面Paimon PMC李劲松撰写的文章中了解:</p><p><a href="https://zhuanlan.zhihu.com/p/646325692" target="_blank" rel="noreferrer">当流计算邂逅数据湖：Paimon 的前生今世</a></p><h3 id="生产实践-1" tabindex="-1">生产实践 <a class="header-anchor" href="#生产实践-1" aria-label="Permalink to &quot;生产实践&quot;">​</a></h3><ul><li><p><a href="https://flink-learning.org.cn/article/detail/8c890409a3ce4e730adbd424e66fd92b?name=article&amp;tab=suoyou&amp;page=1" target="_blank" rel="noreferrer">Flink基于Paimon的实时湖仓解决方案的演进</a></p></li><li><p><a href="https://flink-learning.org.cn/article/detail/9bed44cba49baafb6eb2c60b128cbd0f?spm=a2csy.flink.0.0.2799791emq2uKc&amp;name=article&amp;tab=suoyou&amp;page=1" target="_blank" rel="noreferrer">小米基于 Apache Paimon 的流式湖仓实践</a></p></li></ul><h2 id="fluss" tabindex="-1">Fluss <a class="header-anchor" href="#fluss" aria-label="Permalink to &quot;Fluss&quot;">​</a></h2><p>Fluss刚刚于2024年底Flink Forward Asia上开源，现在市面上资料比较少，也没有生产实践。选几篇有价值的介绍：</p><ul><li>Flink PMC 伍翀 <a href="https://flink-learning.org.cn/article/detail/68f39bcc6623723e17434eae3fedd741" target="_blank" rel="noreferrer">Fluss：面向实时分析设计的下一代流存储</a></li><li>罗宇侠 <a href="https://flink-learning.org.cn/article/detail/776e869cc97ccd41cabadd4ea840f632" target="_blank" rel="noreferrer">流存储Fluss：迈向湖流一体架构</a></li><li>Yaroslav Tkachenko <a href="https://flink-learning.org.cn/article/detail/ca0ee543b84422722d55b6f6a993c948" target="_blank" rel="noreferrer">Fluss: First Impression</a></li><li><a href="https://alibaba.github.io/fluss-docs/docs/intro/" target="_blank" rel="noreferrer">Fluss官方文档</a></li></ul><h2 id="flink-2-0" tabindex="-1">Flink 2.0 <a class="header-anchor" href="#flink-2-0" aria-label="Permalink to &quot;Flink 2.0&quot;">​</a></h2><h3 id="新特性" tabindex="-1">新特性 <a class="header-anchor" href="#新特性" aria-label="Permalink to &quot;新特性&quot;">​</a></h3><ul><li>云原生存算分离ForSt DB <ul><li>分布式高性能有状态计算</li><li>计算和存储解绑</li></ul></li><li>流批一体 <ul><li>一份数据 + 一份代码+ 一个引擎</li></ul></li><li>流式湖仓 <ul><li>Flink + Paimon Integration <ul><li>宽表拼接: Partial Update、Sink 合并、列式 Compact</li><li>维表查询: Lookup Join、Skew Join、Proc-time Temporal Join</li><li>流批一体: CDC、Materialized Table</li></ul></li></ul></li></ul><h3 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-label="Permalink to &quot;资料&quot;">​</a></h3><ul><li>Apache Flink 2.0: Streaming into the Future (FlinkForward/主论坛.pdf 13页 至 44页)</li><li>Flink 2.0 存算分离状态存储 – ForSt DB (FlinkForward/核心技术.pdf 83页 至 107页)</li></ul><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>流计算与实时湖仓的发展趋势:</p><ul><li>技术层面：更实时的数据处理与分析，从天级，到分钟级，再到秒级。</li><li>流式处理：在流式场景下高校的查询与更新数据，提升全链路的数据新鲜度。</li><li>多引擎兼容: 支持Flink，Spark等多样化引擎，通过数据湖底座灵活扩展，满足复杂计算需求。</li><li>湖仓一体化：一条链路满足实时离线计算处理，一套湖仓满足不同数据的存储查询。减少维护成本。</li><li>SQL：通过SQL操作简化数据处理流程，降低技术门槛，支持实时分析与混合负载。</li></ul>',36)]))}const b=e(t,[["render",n]]);export{d as __pageData,b as default};
